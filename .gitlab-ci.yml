image: azul/zulu-openjdk-debian:11

# Enable Docker-in-Docker (DinD) for TestContainers
services:
  - docker:dind

variables:
  DOCKER_HOST: "tcp://docker:2375"
  # Improve performance by using overlayfs
  DOCKER_DRIVER: overlay2
  # Disable Gradle daemon during build
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
  # Tell Gradle to write its files to the build directory
  - export GRADLE_USER_HOME=`pwd`/.gradle
  # Remove files that might be problematic (recommended by Travis CI)
  - rm -f  ${GRADLE_USER_HOME}/caches/modules-2/modules-2.lock
  - rm -fr ${GRADLE_USER_HOME}/caches/*/plugin-resolution/

# Ideas taken from https://docs.gitlab.com/ee/ci/caching/ as well as
#   https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Gradle.gitlab-ci.yml
cache: &gradle_cache_settings
  key: ${CI_COMMIT_REF_SLUG}   # One cache per branch
  paths:
    - build
    - .gradle
  policy: pull-push

stages:
  - build
  - package
  - verify
  - deploy

build:
  stage: build
  cache:
    <<: *gradle_cache_settings
    policy: push
  script:
    - ./gradlew --build-cache build
    - ./gradlew jacocoTestCoverageVerification
    - ./gradlew jacocoTestReport printCoverage
  coverage: '/^Coverage:\s(\d+\.\d+%)/'
  artifacts:
    when: always
    paths:
      - build/reports/
      - build/libs/orkg-*.jar
    reports:
      junit: build/test-results/**/TEST-*.xml

pages:
  stage: deploy
  cache:
    <<: *gradle_cache_settings
    policy: pull
  services: []    # Disable Docker-in-Docker
  script:
    - apt update && apt install --assume-yes graphviz
    - ./gradlew --build-cache asciidoctor
    - mkdir -p public
    - cp -r build/docs/asciidoc/* public/
  artifacts:
    paths:
      - public
  only:
    - master

.docker-build-instructions: &docker-build-instructions
  stage: package
  cache:
    <<: *gradle_cache_settings
    policy: pull
  dependencies:
    - build
  script:
    # Build using Jib (pushed automatically)
    - ./gradlew jib -Djib.to.image=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA -Djib.to.tags=$IMAGE_TAG -Djib.to.auth.username=$REGISTRY_USER -Djib.to.auth.password=$REGISTRY_PASSWORD

docker-build-master:
  variables:
    IMAGE_TAG: latest
  <<: *docker-build-instructions
  only:
    - master

docker-build:
  variables:
    IMAGE_TAG: $CI_COMMIT_REF_SLUG
  <<: *docker-build-instructions
  except:
    - master

# (Security) Scanning templates
include:
  - template: Container-Scanning.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml

container_scanning:
  stage: verify
  variables:
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE

dependency_scanning:
  stage: verify
